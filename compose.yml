# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
services:
  users_db:
    container_name: users_db
    networks:
      - gsa
    image: docker.io/bitnami/mongodb:5.0
    volumes:
      - users_db:/bitnami/mongodb
    environment:
      MONGODB_PORT_NUMBER: 20321
      MONGODB_ROOT_USER: ${USERS_MONGO_ROOT_USERNAME:?}
      MONGODB_ROOT_PASSWORD: ${USERS_MONGO_ROOT_PASSWORD:?}
      MONGODB_USERNAME: ${USERS_MONGO_USERNAME:?}
      MONGODB_PASSWORD: ${USERS_MONGO_PASSWORD:?}
      MONGODB_DATABASE: ${USERS_MONGO_DATABASE:?}
    restart: always
    healthcheck:
      test: mongo --username $$MONGODB_USERNAME --password $$MONGODB_PASSWORD --host users_db --port $$MONGODB_PORT_NUMBER $$MONGODB_DATABASE --authenticationDatabase=$$MONGODB_DATABASE --quiet --eval 'db.runCommand("ping").ok'
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
  users_db_admin:
    container_name: users_db_admin
    networks:
      - gsa
    image: docker.io/xeptore/mongo-express-wget:latest
    depends_on:
      users_db:
        condition: service_healthy
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${USERS_MONGO_WEB_USERNAME:?}
      ME_CONFIG_BASICAUTH_PASSWORD: ${USERS_MONGO_WEB_PASSWORD:?}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${USERS_MONGO_ROOT_USERNAME:?}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${USERS_MONGO_ROOT_PASSWORD:?}
      ME_CONFIG_OPTIONS_EDITORTHEME: base16-dark
      ME_CONFIG_MONGODB_PORT: 20321
      ME_CONFIG_MONGODB_SERVER: users_db
      VCAP_APP_HOST: users_db_admin
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider --auth-no-challenge --http-user=$$ME_CONFIG_BASICAUTH_USERNAME --http-password=$$ME_CONFIG_BASICAUTH_PASSWORD http://users_db_admin:8081/db/admin
      interval: 5s
      timeout: 5s
      retries: 2
      start_period: 5s
  userssrv:
    container_name: userssrv_app
    networks:
      - gsa
    image: docker.io/xeptore/gsa-userssrv:3
    depends_on:
      users_db:
        condition: service_healthy
    environment:
      SERVER_HOST: userssrv
      SERVER_PORT: 50050
      DATABASE_HOST: users_db
      DATABASE_PORT: 20321
      DATABASE_USE_AUTH: true
      DATABASE_USERNAME: ${USERS_MONGO_USERNAME:?}
      DATABASE_PASSWORD: ${USERS_MONGO_PASSWORD:?}
      DATABASE_NAME: ${USERS_MONGO_DATABASE:?}
      JWT_SECRET: ${JWT_SECRET:?}
    restart: on-failure
    healthcheck:
      test:
        - CMD
        - /ping
        - userssrv:50050
      interval: 5s
      timeout: 3s
      start_period: 5s
      retries: 2
  cache:
    container_name: cache
    networks:
      - gsa
    image: docker.io/bitnami/redis:6.2
    environment:
      REDIS_PORT_NUMBER: 7658
      REDIS_PASSWORD: ${REDIS_PASSWORD:?}
    volumes:
      - redis_data:/bitnami/redis/data
    restart: always
    healthcheck:
      test: redis-cli -h cache -p $$REDIS_PORT_NUMBER ping
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 2s
  core_db:
    container_name: core_db
    networks:
      - gsa
    image: docker.io/bitnami/postgresql:14
    environment:
      POSTGRESQL_POSTGRES_PASSWORD: ${POSTGRESQL_ROOT_PASSWORD:?}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:?}
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME:?}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE:?}
    volumes:
      - core_data:/bitnami/postgresql
    restart: always
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -t
        - "5"
        - -d
        - $POSTGRESQL_DATABASE
        - -h
        - core_db
        - -p
        - "5432"
        - -U
        - $POSTGRESQL_USERNAME
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 2s
  core_db_admin:
    container_name: core_db_admin
    networks:
      - gsa
    image: docker.io/dpage/pgadmin4:6
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:?}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:?}
      PGADMIN_DISABLE_POSTFIX: true
      PGADMIN_LISTEN_ADDRESS: core_db_admin
      PGADMIN_LISTEN_PORT: 8585
    volumes:
      - core_db_admin_data:/var/lib/pgadmin
    depends_on:
      core_db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider http://core_db_admin:$$PGADMIN_LISTEN_PORT/login
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 2s
  coresrv:
    container_name: coresrv_app
    image: docker.io/xeptore/gsa-coresrv:1
    networks:
      - gsa
    depends_on:
      cache:
        condition: service_healthy
      core_db:
        condition: service_healthy
      userssrv:
        condition: service_healthy
    restart: "no"
    ports:
      - 8888:8888
    environment:
      ASPNETCORE_URLS: http://+:8888
      REDIS_HOST: cache
      REDIS_PORT: 7658
      REDIS_PASSWORD: ${REDIS_PASSWORD:?}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:?}
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME:?}
      POSTGRESQL_DB: ${POSTGRESQL_DATABASE:?}
      POSTGRESQL_HOST: core_db
      POSTGRESQL_PORT: 5432
      USERS_SERVICE_ADDRESS: http://userssrv:50050
    healthcheck:
      test:
        - CMD
        - ./Ping
        - http://coresrv:8888
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    networks:
      - gsa
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: wget --quiet --tries=1 --spider http://cadvisor:8080/containers/
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
    depends_on:
      cache:
        condition: service_healthy
      users_db:
        condition: service_healthy
      userssrv:
        condition: service_healthy
      core_db:
        condition: service_healthy
      coresrv:
        condition: service_healthy
  node_monitor:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    networks:
      - gsa
    command:
      - "--path.rootfs=/host"
    pid: host
    restart: unless-stopped
    volumes:
      - "/:/host:ro,rslave"
    healthcheck:
      test: wget --quiet --tries=1 --spider http://node_monitor:9100
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
    depends_on:
      cache:
        condition: service_healthy
      users_db:
        condition: service_healthy
      userssrv:
        condition: service_healthy
      core_db:
        condition: service_healthy
      coresrv:
        condition: service_healthy
  disk_usage_monitor:
    image: docker.io/xeptore/prometheus-disk-usage-exporter:latest
    container_name: disk_usage_monitor
    networks:
      - gsa
    command:
      - "--bind-address=disk_usage_monitor:9995"
      - "--analyzed-path=/host"
      - "--ignore-dirs=/host/proc,/host/dev,/host/sys,/host/run,/host/var/host/cache/host/rsnapshot"
    pid: host
    restart: unless-stopped
    volumes:
      - "/:/host"
  prometheus:
    image: quay.io/prometheus/prometheus:latest
    container_name: prometheus
    networks:
      - gsa
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: wget --quiet --tries=1 --spider http://prometheus:9090
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
    depends_on:
      cadvisor:
        condition: service_healthy
      disk_usage_monitor:
        condition: service_started
  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: grafana
    networks:
      - gsa
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/custom.ini:ro
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:?}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?}
      GF_USERS_ALLOW_SIGN_UP: false
    healthcheck:
      test: wget --quiet --tries=1 --spider http://grafana:3000
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
    depends_on:
      prometheus:
        condition: service_healthy
  caddy:
    image: docker.io/library/caddy:2
    container_name: caddy
    ports:
      - 3000:3000
      - 7575:7575
      - 8080:8080
      - 8585:8585
      - 9090:9090
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      MONITORING_ADMIN_USER: ${MONITORING_ADMIN_USER}
      MONITORING_ADMIN_PASSWORD: ${MONITORING_ADMIN_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider http://caddy:8686
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 5s
    networks:
      - gsa
    depends_on:
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
      core_db_admin:
        condition: service_healthy
      users_db_admin:
        condition: service_healthy
volumes:
  coresrv_cache:
    name: coresrv_cache
  redis_data:
    name: redis_data
  core_data:
    name: core_data
  core_db_admin_data:
    name: core_db_admin_data
  users_db:
    name: users_db
  grafana_storage:
    name: grafana_storage
  prometheus_data:
    name: prometheus_data
  caddy_data:
    name: caddy_data
  caddy_config:
    name: caddy_config
networks:
  gsa:
    name: gsa-net

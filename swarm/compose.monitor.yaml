version: "3.9"
networks:
  net:
    name: mon_net
    attachable: true
services:
  nodemon:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - --path.rootfs=/host
    hostname: nodemon
    healthcheck:
      test: wget --quiet --tries=1 --spider http://nodemon:9100
      interval: 27s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - net
    ports:
      - target: 9100
        published: 9100
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: /
        target: /host
        read_only: true
        bind:
          propagation: rslave
    deploy:
      endpoint_mode: vip
      mode: global
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 10s
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    hostname: cadvisor
    healthcheck:
      test: wget --quiet --tries=1 --spider http://cadvisor:8080/containers/
      interval: 35s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - net
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: false
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker/
        target: /var/lib/docker
        read_only: true
    deploy:
      endpoint_mode: vip
      mode: global
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
  disk_usage_monitor:
    image: docker.io/xeptore/prometheus-disk-usage-exporter:latest
    hostname: disk_usage_monitor
    networks:
      - net
    command:
      - --analyzed-path=/host
      - --ignore-dirs=/host/proc,/host/dev,/host/sys,/host/run,/host/var/host/cache/host/rsnapshot
    healthcheck:
      test: wget --quiet --tries=1 --spider http://disk_usage_monitor:9995
      interval: 29s
      timeout: 5s
      retries: 2
      start_period: 10s
    ports:
      - target: 9995
        published: 9995
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: /
        target: /host
        read_only: false
    deploy:
      endpoint_mode: vip
      mode: global
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
  prometheus:
    image: quay.io/prometheus/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    hostname: prometheus
    healthcheck:
      test: wget --quiet --tries=1 --spider http://prometheus:9090
      interval: 19s
      timeout: 4s
      retries: 5
      start_period: 10s
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
        uid: "65534"
        gid: "65534"
        mode: 0400
    networks:
      - net
    dns: ${DNS_SERVER_IP:?}
    volumes:
      - type: volume
        source: prometheus_data
        target: /prometheus
        read_only: false
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - node.role == worker
          - node.labels.category == monitor
        max_replicas_per_node: 1
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
  influxdb:
    image: docker.io/library/influxdb:2.1
    hostname: influxdb
    healthcheck:
      test: wget --quiet --tries=1 --spider http://influxdb:8086
      interval: 35s
      timeout: 4s
      retries: 5
      start_period: 10s
    networks:
      - net
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      INFLUXD_HTTP_BIND_ADDRESS: 0.0.0.0:8086
    env_file:
      - ./mon/.env.influxdb
    volumes:
      - type: volume
        source: influxdb_data
        target: /var/lib/influxdb2
        read_only: false
      - type: volume
        source: influxdb_config
        target: /etc/influxdb2
        read_only: false
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - node.role == worker
          - node.labels.category == monitor
        max_replicas_per_node: 1
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
  grafana:
    image: docker.io/grafana/grafana:latest
    hostname: grafana
    healthcheck:
      test: wget --quiet --tries=1 --spider http://grafana:3000
      interval: 32s
      timeout: 4s
      retries: 5
      start_period: 10s
    networks:
      - net
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_USERS_ALLOW_SIGN_UP: "false"
    env_file:
      - ./mon/.env.grafana
    configs:
      - source: grafana
        target: /etc/grafana/custom.ini
        uid: "472"
        gid: "0"
        mode: 0400
    volumes:
      - type: volume
        source: grafana_storage
        target: /var/lib/grafana
        read_only: false
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - node.role == worker
          - node.labels.category == monitor
        max_replicas_per_node: 1
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
  chronograf:
    image: docker.io/library/chronograf:1.9
    hostname: chronograf
    healthcheck:
      test: curl -sf http://chronograf:8888
      interval: 31s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - net
    environment:
      INFLUXDB_URL: http://influxdb:8086
      PORT: 8888
      HOST: chronograf
    volumes:
      - type: volume
        source: chronograf_data
        target: /var/lib/chronograf
        read_only: false
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - node.role == worker
          - node.labels.category == monitor
        max_replicas_per_node: 1
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
  swarmvisualizer:
    image: docker.io/dockersamples/visualizer:latest
    hostname: swarmvisualizer
    healthcheck:
      test: wget --quiet --tries=1 --spider http://swarmvisualizer:8080
      interval: 28s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - net
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: false
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - node.role == manager
        max_replicas_per_node: 1
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 4
        window: 5s
  caddy:
    image: docker.io/library/caddy:2
    networks:
      - net
    hostname: caddy
    env_file:
      - ./mon/.env.caddy
    healthcheck:
      test: wget --quiet --tries=1 --spider http://caddy:8787
      interval: 29s
      timeout: 4s
      retries: 5
      start_period: 3s
    configs:
      - source: caddy
        target: /etc/caddy/Caddyfile
        uid: "0"
        gid: "0"
        mode: 0400
    volumes:
      - type: volume
        source: caddymon_data
        target: /data
        read_only: false
      - type: volume
        source: caddymon_config
        target: /config
        read_only: false
    ports:
      - target: 2020
        published: 2020
        protocol: tcp
        mode: host
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
      - target: 8086
        published: 8086
        protocol: tcp
        mode: host
      - target: 8888
        published: 8888
        protocol: tcp
        mode: host
      - target: 8383
        published: 8383
        protocol: tcp
        mode: host
      - target: 9393
        published: 9393
        protocol: tcp
        mode: host
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - node.role == worker
          - node.labels.category == monitor
        max_replicas_per_node: 1
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 0
        window: 5s
configs:
  caddy:
    file: ./mon/Caddyfile
  prometheus:
    file: ./mon/prometheus.yml
  grafana:
    file: ./mon/grafana.ini
volumes:
  prometheus_data:
  caddymon_data:
  caddymon_config:
  influxdb_data:
  influxdb_config:
  grafana_storage:
  chronograf_data:
